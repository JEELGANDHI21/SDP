{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT\\\\client\\\\src\\\\Components\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  useEffect(() => {\n    // Function to extract and display the alert message\n    const displayAlert = () => {\n      const alertMessage = new URLSearchParams(window.location.search).get(\"alert\");\n      if (alertMessage) {\n        alert(decodeURIComponent(alertMessage));\n      }\n    };\n\n    // Call the displayAlert function when the component mounts\n    displayAlert();\n  }, []);\n  const loginWithGoogle = () => {\n    // Assuming you make a server request to initiate Google authentication\n    // You can handle the domain not allowed scenario in the server response\n    // and show a pop-up or redirect accordingly\n    fetch(\"http://localhost:8080/auth/google\").then(response => {\n      if (!response.ok) {\n        // If the domain is not allowed, show a pop-up\n        alert(\"Domain not allowed\");\n      } else {\n        // If everything is fine, initiate the Google authentication\n        window.open(\"http://localhost:8080/auth/google/callback\", \"_self\");\n      }\n    }).catch(error => {\n      console.error(\"Error initiating Google authentication:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login-with-google-btn\",\n        onClick: loginwithgoogle,\n        children: \"SIGN IN WITH GOOGLE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","Login","_s","displayAlert","alertMessage","URLSearchParams","window","location","search","get","alert","decodeURIComponent","loginWithGoogle","fetch","then","response","ok","open","catch","error","console","className","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onClick","loginwithgoogle","_c","$RefreshReg$"],"sources":["E:/PROJECT/client/src/Components/Login.jsx"],"sourcesContent":["import React, {useEffect}from \"react\";\r\nimport \"./login.css\";\r\n\r\nconst Login = () => {\r\n  useEffect(() => {\r\n    // Function to extract and display the alert message\r\n    const displayAlert = () => {\r\n      const alertMessage = new URLSearchParams(window.location.search).get(\"alert\");\r\n      if (alertMessage) {\r\n        alert(decodeURIComponent(alertMessage));\r\n      }\r\n    };\r\n\r\n    // Call the displayAlert function when the component mounts\r\n    displayAlert();\r\n  }, []);\r\n  const loginWithGoogle = () => {\r\n    // Assuming you make a server request to initiate Google authentication\r\n    // You can handle the domain not allowed scenario in the server response\r\n    // and show a pop-up or redirect accordingly\r\n    fetch(\"http://localhost:8080/auth/google\")\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          // If the domain is not allowed, show a pop-up\r\n          alert(\"Domain not allowed\");\r\n        } else {\r\n          // If everything is fine, initiate the Google authentication\r\n          window.open(\"http://localhost:8080/auth/google/callback\", \"_self\");\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error initiating Google authentication:\", error);\r\n      });\r\n  };\r\n \r\n  return (\r\n    <div className=\"login-page\">\r\n      <h1 style={{ textAlign: \"center\" }}>Login</h1>\r\n      <div className=\"form\">\r\n        <button className=\"login-with-google-btn\" onClick={loginwithgoogle}>\r\n          SIGN IN WITH GOOGLE\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAM,OAAO;AACrC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClBJ,SAAS,CAAC,MAAM;IACd;IACA,MAAMK,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,CAAC,OAAO,CAAC;MAC7E,IAAIL,YAAY,EAAE;QAChBM,KAAK,CAACC,kBAAkB,CAACP,YAAY,CAAC,CAAC;MACzC;IACF,CAAC;;IAED;IACAD,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EACN,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACA;IACAC,KAAK,CAAC,mCAAmC,CAAC,CACvCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB;QACAN,KAAK,CAAC,oBAAoB,CAAC;MAC7B,CAAC,MAAM;QACL;QACAJ,MAAM,CAACW,IAAI,CAAC,4CAA4C,EAAE,OAAO,CAAC;MACpE;IACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IACjE,CAAC,CAAC;EACN,CAAC;EAED,oBACEnB,OAAA;IAAKqB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBtB,OAAA;MAAIuB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,EAAC;IAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9C5B,OAAA;MAAKqB,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBtB,OAAA;QAAQqB,SAAS,EAAC,uBAAuB;QAACQ,OAAO,EAAEC,eAAgB;QAAAR,QAAA,EAAC;MAEpE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA1CID,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AA2CX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}